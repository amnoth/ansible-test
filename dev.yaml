---
- name: "Development Station"
  hosts: localhost
  connection: local
  tasks:
    # Unattended Upgrades
    - name: Install Unattended Upgrades
      ansible.builtin.apt:
        state: present
        name:
          - unattended-upgrades
    - name: Enable Unattended Upgrades Service
      ansible.builtin.systemd:
        name: unattended-upgrades.service
        state: started
        enabled: true

    # Shell customizations
    - name: "Install zsh"
      apt:
        name: zsh
        state: present
      become: true
      become_user: root
      become_method: sudo
    - name: "Install tmux"
      apt:
        name: tmux
        state: present
      become: true
      become_user: root
      become_method: sudo
    # oh-my-zsh
    - name: "Install & configure oh-my-zsh"
      block:
        # tmux config
        - name: "Install tpm"
          shell: |
            git clone https://github.com/tmux-plugins/tmp ~/.tmux/plugins/tpm
          args:
            chdir: ~
        # make sure ~/.config/tmux/tmux.conf exists
        - name: "Create ~/.config/tmux directory"
          file:
            path: ~/.config/tmux
            state: directory
            mode: 0755
        # create ~/.config/tmux/tmux.conf
        - name: "Create ~/.config/tmux/tmux.conf"
          file:
            path: ~/.config/tmux/tmux.conf
            state: touch
            mode: 0644
        # append to the end of ~/.config/tmux/tmux.conf
        - name: "Append to ~/.config/tmux/tmux.conf"
          lineinfile:
            path: ~/.config/tmux/tmux.conf
            line: |
              # https://github.com/dreamsofcode-io/tmux/blob/main/tmux.conf
              set-option -sa terminal-overrides ",xterm*:Tc"
              set -g mouse on

              unbind C-b
              set -g prefix C-Space
              bind C-Space send-prefix

              # Vim style pane selection
              bind h select-pane -L
              bind j select-pane -D 
              bind k select-pane -U
              bind l select-pane -R

              # Start windows and panes at 1, not 0
              set -g base-index 1
              set -g pane-base-index 1
              set-window-option -g pane-base-index 1
              set-option -g renumber-windows on

              # Use Alt-arrow keys without prefix key to switch panes
              bind -n M-Left select-pane -L
              bind -n M-Right select-pane -R
              bind -n M-Up select-pane -U
              bind -n M-Down select-pane -D

              # Shift arrow to switch windows
              bind -n S-Left  previous-window
              bind -n S-Right next-window

              # Shift Alt vim keys to switch windows
              bind -n M-H previous-window
              bind -n M-L next-window

              set -g @catppuccin_flavour 'mocha'

              set -g @plugin 'tmux-plugins/tpm'
              set -g @plugin 'tmux-plugins/tmux-sensible'
              set -g @plugin 'christoomey/vim-tmux-navigator'
              set -g @plugin 'dreamsofcode-io/catppuccin-tmux'
              set -g @plugin 'tmux-plugins/tmux-yank'

              run '~/.tmux/plugins/tpm/tpm'

              # set vi-mode
              set-window-option -g mode-keys vi
              # keybindings
              bind-key -T copy-mode-vi v send-keys -X begin-selection
              bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
              bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

              bind '"' split-window -v -c "#{pane_current_path}"
              bind % split-window -h -c "#{pane_current_path}"

        # oh-my-zsh
        - name: "Install oh-my-zsh"
          shell: |
            sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
          args:
            chdir: ~
        # zsh-autosuggestions
        - name: "Install zsh-syntax-highlighting as a plugin"
          shell: |
            git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
        - name: "Enable zsh-syntax-highlighting plugin"
          lineinfile:
            path: ~/.zshrc
            regex: "^plugins=\\(.*\\)"
            line: "plugins=(git zsh-syntax-highlighting)"
            state: present
        - name: "Install catppuccin zsh-syntax-highlighting"
          shell: |
            git clone https://github.com/catppuccin/zsh-syntax-highlighting.git
            cd zsh-syntax-highlighting/themes/
            mkdir -p ~/.zsh
            cp -v catppuccin_mocha-zsh-syntax-highlighting.zsh ~/.zsh/
        - name: "Enable catppuccin zsh-syntax-highlighting"
          lineinfile:
            path: ~/.zshrc
            insertbefore: "plugins=\\(.*\\)"
            line: "source ~/.zsh/catppuccin_mocha-zsh-syntax-highlighting.zsh"
            state: present
        # kubectl
        - name: "Install kubectl"
          shell: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        - name: "Install kubectx"
          shell: |
            sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx
            sudo ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx
            sudo ln -s /opt/kubectx/kubens /usr/local/bin/kubens
        - name: "Enable kubectl autocompletion"
          lineinfile:
            path: ~/.zshrc
            insertafter: "plugins=\\(.*\\)"
            line: |

              source <(kubectl completion zsh)
              alias k=kubectl
              alias kx=kubectx
              alias kn=kubens
              alias ke='kubectl get events --all-namespaces --sort-by=.metadata.creationTimestamp -w'
              # complete -F __start_kubectl k
              # complete -F __start_kubectl kx
              # complete -F __start_kubectl kn

            state: present
        # helm
        - name: "Install helm"
          shell: |
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        - name: "Enable helm autocompletion"
          lineinfile:
            path: ~/.zshrc
            insertafter: "plugins=\\(.*\\)"
            line: |

              source <(helm completion zsh)
              alias h=helm

            state: present
        # flux
        - name: "Install flux cli"
          shell: |
            curl -s https://fluxcd.io/install.sh | sudo bash
        - name: "Enable flux cli autocompletion"
          lineinfile:
            path: ~/.zshrc
            insertafter: "plugins=\\(.*\\)"
            line: |

              command -v flux >/dev/null && . <(flux completion zsh)

            state: present
      become: true
      become_user: amnoth
      become_method: sudo

    # docker
    - name: "Install & configure docker"
      block:
        - name: "Update apt cache"
          ansible.builtin.apt:
            update_cache: true
            cache_valid_time: 3600
        - name: "Install dependencies"
          ansible.builtin.apt:
            name: "{{ packages }}"
            state: present
            update_cache: true
          vars:
            packages:
              - ca-certificates
              - curl
              - gnupg
        - name: "Add apt signing key for docker"
          ansible.builtin.apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present
        - name: "Add apt repository for stable Docker version"
          ansible.builtin.apt_repository:
            repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
            state: present
        - name: "Install Docker"
          ansible.builtin.apt:
            name: "{{ packages }}"
            state: present
            update_cache: true
          vars:
            packages:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
        - name: "Add users to docker group"
          ansible.builtin.user:
            name: "amnoth"
            append: true
            groups: docker
      become: true
      become_user: root
      become_method: sudo

    - name: "Install & configure Neovim"
      block:
        - name: "Create ~/src directory"
          file:
            path: ~/src
            state: directory
            mode: 0755

        - name: "Neovim - Install prerequisites"
          apt:
            name: "{{ item }}"
            state: present
          with_items:
            - ninja-build
            - gettext
            - cmake
            - unzip
            - curl

        - name: "Neovim - Build stable release & install from deb package"
          shell: |
            git clone https://github.com/neovim/neovim
            cd neovim
            git checkout stable
            make CMAKE_BUILD_TYPE=RelWithDebInfo
            cd build
            cpack -G DEB && sudo dpkg -i nvim-linux64.deb
          args:
            chdir: ~/src

        - name: "Neovim - Use nvim for vi"
          alternatives: name=vi path=/usr/bin/nvim
        - name: "Neovim - Use nvim for vim"
          alternatives: name=vim path=/usr/bin/nvim
        - name: "Neovim - Use nvim for editor"
          alternatives: name=editor path=/usr/bin/nvim
      become: true
      become_user: root
      become_method: sudo
