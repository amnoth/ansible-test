---
- name: "Development Station"
  hosts: localhost
  connection: local
  vars:
    username: amnoth
  tasks:
    - name: Get deb architecture
      ansible.builtin.shell: |
        dpkg --print-architecture
      register: deb_architecture_output
    - name: Set deb architecture fact
      ansible.builtin.set_fact:
        deb_architecture: "{{ deb_architecture_output.stdout }}"
    # unattended upgrades
    - name: Install Unattended Upgrades
      ansible.builtin.apt:
        state: present
        name:
          - unattended-upgrades
    - name: Enable Unattended Upgrades Service
      ansible.builtin.systemd:
        name: unattended-upgrades.service
        state: started
        enabled: true
    # baseline packages
    - name: Install baseline packages
      ansible.builtin.apt:
        name:
          - acl
          - git
          - curl
          # dev tools
          - jq
    # kubectl
    - name: kubectl
      become: true
      block:
        - name: kubectl | install dependancies
          ansible.builtin.apt:
            name:
              - apt-transport-https
              - ca-certificates
              - curl
            state: present
        - name: kubectl | add apt key to keyring
          ansible.builtin.get_url:
            url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
            dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
            mode: "0644"
        - name: kubectl | add apt repository
          ansible.builtin.apt_repository:
            repo: deb [arch={{ deb_architecture }} signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /
            state: present
        - name: kubectl | install
          ansible.builtin.apt:
            name: kubectl
            state: present
            update_cache: true
            cache_valid_time: 3600
    # helm
    - name: helm
      become: true
      block:
        - name: helm | install dependancies
          ansible.builtin.apt:
            name:
              - apt-transport-https
            state: present
        - name: helm | add apt key to keyring
          ansible.builtin.get_url:
            url: https://baltocdn.com/helm/signing.asc
            dest: /etc/apt/keyrings/helm-apt-keyring.asc
            mode: "0644"
        - name: helm | add apt repository
          ansible.builtin.apt_repository:
            repo: deb [arch={{ deb_architecture }} signed-by=/etc/apt/keyrings/helm-apt-keyring.asc] https://baltocdn.com/helm/stable/debian/ all main
            state: present
        - name: helm | install
          ansible.builtin.apt:
            name: helm
            state: present
            update_cache: true
            cache_valid_time: 3600
    # flux
    - name: flux
      become: true
      block:
        - name: flux | download installer
          ansible.builtin.get_url:
            url: https://fluxcd.io/install.sh
            dest: /tmp/flux-install.sh
            mode: "0755"
        - name: flux | install
          ansible.builtin.shell: |
            /tmp/flux-install.sh
    # docker
    - name: docker
      become: true
      block:
        - name: docker | install dependencies
          ansible.builtin.apt:
            name:
              - ca-certificates
              - curl
              - gnupg
            state: present
            update_cache: true
            cache_valid_time: 3600
        - name: docker | add apt key to keyring
          ansible.builtin.get_url:
            url: https://download.docker.com/linux/ubuntu/gpg
            dest: /etc/apt/keyrings/docker-apt-keyring.pgp
            mode: "0644"
        - name: docker | add apt repository
          ansible.builtin.apt_repository:
            repo: deb [arch={{ deb_architecture }} signed-by=/etc/apt/keyrings/docker-apt-keyring.pgp] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
            state: present
        - name: docker | install
          ansible.builtin.apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: present
            update_cache: true
            cache_valid_time: 3600
        - name: docker | add user to docker group
          ansible.builtin.user:
            name: "{{ username }}"
            append: true
            groups: docker
    # neovim - build from source
    - name: neovim
      become: true
      become_user: root
      block:
        - name: neovim | create ~/src directory
          ansible.builtin.file:
            path: ~/src
            state: directory
            mode: "0755"
        - name: neovim | install prerequisites
          ansible.builtin.apt:
            name:
              - ninja-build
              - gettext
              - cmake
              - unzip
              - curl
            state: present
        - name: neovim | git clone and checkout stable # noqa: latest
          ansible.builtin.git:
            repo: https://github.com/neovim/neovim
            dest: ~/src/neovim
            version: stable
            force: true
        - name: neovim | build stable release & install from deb package
          ansible.builtin.shell: |
            make CMAKE_BUILD_TYPE=RelWithDebInfo
            cd build
            cpack -G DEB && sudo dpkg -i nvim-linux64.deb
          args:
            chdir: ~/src/neovim
        - name: neovim | use nvim for vi
          community.general.alternatives:
            name: vi
            path: /usr/bin/nvim
        - name: neovim | use nvim for vim
          community.general.alternatives:
            name: vim
            path: /usr/bin/nvim
        - name: neovim | use nvim for editor
          community.general.alternatives:
            name: editor
            path: /usr/bin/nvim
    # user
    - name: users
      become: true
      block:
        - name: users | install zsh & tools
          ansible.builtin.apt:
            name:
              - zsh
              - tmux
              - stow
        - name: users | create
          ansible.builtin.user:
            name: "{{ username }}"
            shell: /bin/zsh
            groups:
              - docker
            createhome: true
            state: present
        - name: users | add to sudoers
          ansible.builtin.copy:
            content: "{{ username }} ALL=(ALL) NOPASSWD:ALL"
            dest: "/etc/sudoers.d/{{ username }}"
            owner: root
            group: root
            mode: "0440"
        - name: users | add authorized key from github
          ansible.posix.authorized_key:
            user: "{{ username }}"
            state: present
            key: "https://www.github.com/{{ username }}.keys"
    # dev tools
    - name: dev tools
      become: true
      block:
        # pip3
        - name: dev tools | pip3 | install
          ansible.builtin.apt:
            name: python3-pip
            state: present
        # ansible-lint
        - name: dev tools | ansible-lint | install
          ansible.builtin.pip:
            name: ansible-lint
        - name: dev tools | ansible-lint | add ~/.local/bin to path
          ansible.builtin.copy:
            content: "export PATH=$PATH:$HOME/.local/bin"
            dest: "/etc/profile.d/home-dotlocal-bin.sh"
            owner: root
            group: root
            mode: "0644"
        # nodejs
        - name: dev tools | nodejs | add apt key to keyring
          ansible.builtin.get_url:
            url: https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key
            dest: /etc/apt/keyrings/nodesource-apt-keyring.asc
            mode: "0644"
        - name: dev tools | nodejs | add apt repository
          ansible.builtin.apt_repository:
            repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/nodesource-apt-keyring.asc] https://deb.nodesource.com/node_{{ node_version }} nodistro main"
            state: present
            update_cache: true
          vars:
            node_version: "21.x"
        - name: dev tools | nodejs | install
          ansible.builtin.apt:
            name: nodejs
            state: present
        # golang
        - name: dev tools | go
          become: true
          block:
            - name: dev tools | go | download
              ansible.builtin.get_url:
                url: https://golang.org/dl/go{{ go_version }}.linux-{{ deb_architecture }}.tar.gz
                dest: /tmp/go.tar.gz
                mode: "0644"
                checksum: "sha256:{{ go_version_sha256 }}"
              vars:
                go_version: "1.21.6"
                go_version_sha256: "3f934f40ac360b9c01f616a9aa1796d227d8b0328bf64cb045c7b8c4ee9caea4"
            - name: dev tools | go | extract
              ansible.builtin.unarchive:
                src: /tmp/go.tar.gz
                dest: /usr/local
                creates: "/usr/local/go/bin/go"
            - name: dev tools | go | add /usr/local/go/bin to path
              ansible.builtin.copy:
                content: "export PATH=$PATH:/usr/local/go/bin"
                dest: "/etc/profile.d/user-local-go-bin.sh"
                owner: root
                group: root
                mode: "0644"
        # php
        - name: dev tools | php
          become: true
          block:
            - name: dev tools | php | add apt ppa
              ansible.builtin.apt_repository:
                repo: ppa:ondrej/php
            - name: dev tools | php | install
              ansible.builtin.apt:
                name:
                  - php8.3
                  - php8.3-bcmath
                  - php8.3-bz2
                  - php8.3-cli
                  - php8.3-common
                  - php8.3-curl
                  - php8.3-dev
                  - php8.3-gd
                  - php8.3-grpc
                  - php8.3-ldap
                  - php8.3-mbstring
                  - php8.3-mysql
                  - php8.3-odbc
                  - php8.3-opcache
                  - php8.3-pgsql
                  - php8.3-protobuf
                  - php8.3-redis
                  - php8.3-snmp
                  - php8.3-sqlite3
                  - php8.3-uploadprogress
                  - php8.3-uuid
                  - php8.3-xdebug
                  - php8.3-xml
                  - php8.3-yaml
                  - php8.3-zip
                state: present
                update_cache: true
                cache_valid_time: 3600
        - name: dev tools | swift
          become: true
          block:
            # swift (todo: add key check, and arm64 check)
            - name: dev tools| swift | install prerequisites
                # https://download.swift.org/swift-{{ swift_version  }}-release/ubuntu2204/swift-{{ swift_version  }}-RELEASE/swift-{{ swift_version  }}-RELEASE-ubuntu22.04.tar.gz
              ansible.builtin.apt:
                name:
                  - binutils
                  - git
                  - gnupg2
                  - libc6-dev
                  - libcurl4-openssl-dev
                  - libedit2
                  - libgcc-9-dev
                  - libpython3.10 # libpython3.8
                  - libsqlite3-0
                  - libstdc++-9-dev
                  - libxml2-dev
                  - libz3-dev
                  - pkg-config
                  - tzdata
                  - unzip
                  - zlib1g-dev
                state: present
            - name: dev tools| swift | download
              vars:
                swift_version: "5.9.2"
              ansible.builtin.get_url:
                url: "https://download.swift.org/swift-{{ swift_version }}-release/ubuntu2204/swift-{{ swift_version }}-RELEASE/swift-{{ swift_version }}-RELEASE-ubuntu22.04.tar.gz"
                dest: "/tmp/swift.tar.gz"
                mode: "0644"
            - name: dev tools| swift | extract
              ansible.builtin.unarchive:
                src: "/tmp/swift.tar.gz"
                dest: "/"
                extra_opts:
                  - "--strip-components=1"
                remote_src: true
                creates: "/usr/bin/swift"
            - name: dev tools| swift | set chmod 755 /usr/lib/swift
              ansible.builtin.file:
                path: "/usr/lib/swift"
                recurse: true
                mode: "0755"
    # user config
    - name: user config
      become: true
      become_user: "{{ username }}"
      block:
        - name: user config | install tmux package manager # noqa: latest
          ansible.builtin.git:
            repo: https://github.com/tmux-plugins/tpm
            dest: ~/.tmux/plugins/tpm
            version: HEAD
        - name: user config | create ~/.config/tmux directory
          ansible.builtin.file:
            path: ~/.config/tmux
            state: directory
            mode: "0755"
        - name: user config | oh-my-zsh | check for $ZSH
          ansible.builtin.stat:
            path: ~/.oh-my-zsh
          register: oh_my_zsh_check
        - name: user config | oh-my-zsh | download installer
          ansible.builtin.get_url:
            url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
            dest: /tmp/oh-my-zsh-install.sh
            mode: "0755"
        - name: user config | oh-my-zsh | install
          ansible.builtin.shell: |
            /tmp/oh-my-zsh-install.sh
          args:
            chdir: ~
          when: not oh_my_zsh_check.stat.exists
        - name: user config | install powerline10k # noqa: latest
          ansible.builtin.git:
            repo: https://github.com/romkatv/powerlevel10k.git
            depth: 1
            version: HEAD
            dest: ~/.oh-my-zsh/custom/themes/powerlevel10k
        - name: user config | install zsh-syntax-highlighting # noqa: latest
          ansible.builtin.git:
            repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
            version: HEAD
            dest: ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
        - name: user config | catppuccin zsh-syntax-highlighting | clone repo # noqa: latest
          ansible.builtin.git:
            repo: https://github.com/catppuccin/zsh-syntax-highlighting.git
            dest: /tmp/catppuccin/zsh-syntax-highlighting
            version: HEAD
        - name: user config | catppuccin zsh-syntax-highlighting | create ~/.zsh directory
          ansible.builtin.file:
            path: ~/.zsh
            state: directory
            mode: "0755"
        - name: user config | catppuccin zsh-syntax-highlighting | copy to themes
          ansible.builtin.copy:
            src: /tmp/catppuccin/zsh-syntax-highlighting/themes/catppuccin_mocha-zsh-syntax-highlighting.zsh
            dest: ~/.zsh/
            mode: "0644"
        - name: user config | download dotfiles # noqa: latest
          ansible.builtin.git:
            repo: https://github.com/amnoth/dotfiles.git
            dest: ~/.dotfiles
            version: HEAD
        # stow dotfiles
        - name: user config | stow dotfiles
          ansible.builtin.shell: |
            cd ~/.dotfiles
            stow --adopt .
            git restore .
            stow .
